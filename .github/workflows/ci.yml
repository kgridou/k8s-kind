name: Test and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-deploy:
    name: Test Application Deployment
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Build application
      run: mvn clean package -DskipTests
      
    - name: Set up Kind
      uses: helm/kind-action@v1.10.0
      with:
        cluster_name: test
        
    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: 'latest'
        
    - name: Generate TLS certificates for Vault
      run: |
        mkdir -p certs
        cd certs
        openssl genrsa -out vault.local-key.pem 2048
        openssl req -new -x509 -key vault.local-key.pem -out vault.local.pem -days 365 -subj "/CN=vault.local"
        
    - name: Build and load Docker image
      run: |
        docker build -t myapp:test .
        kind load docker-image myapp:test --name test
        
    - name: Install and configure Vault
      run: |
        # Add Helm repo and install Vault in dev mode
        helm repo add hashicorp https://helm.releases.hashicorp.com
        helm repo update
        helm install vault hashicorp/vault --set='server.dev.enabled=true' --set='server.dev.devRootToken=testroot' --wait --timeout=300s
        
        # Wait for Vault to be ready
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=vault --timeout=120s
        
        # Configure Vault
        kubectl exec vault-0 -- vault auth enable kubernetes
        kubectl exec vault-0 -- vault write auth/kubernetes/config \
          token_reviewer_jwt="$(kubectl create token default)" \
          kubernetes_host="https://kubernetes.default.svc:443" \
          kubernetes_ca_cert="$(kubectl config view --raw --minify --flatten -o jsonpath='{.clusters[].cluster.certificate-authority-data}' | base64 -d)"
        
        # Create secrets in Vault
        kubectl exec vault-0 -- vault kv put secret/myapp/db \
          username="testuser" password="testpass" host="localhost" port="5432" database="testdb"
        kubectl exec vault-0 -- vault kv put secret/myapp/api \
          external-api-key="test-api-key" jwt-secret="test-jwt-secret"
        
        # Create policy and role
        kubectl exec vault-0 -- sh -c 'echo "path \"secret/data/myapp/*\" { capabilities = [\"read\"] }" | vault policy write myapp -'
        kubectl exec vault-0 -- vault write auth/kubernetes/role/myapp \
          bound_service_account_names=myapp-sa \
          bound_service_account_namespaces=default \
          policies=myapp \
          ttl=24h
          
    - name: Deploy application
      run: |
        # Update image tag in deployment
        sed -i 's/myapp:latest/myapp:test/g' k8s/myapp.yaml
        kubectl apply -f k8s/myapp.yaml
        
    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq
        
    - name: Wait for deployment and test
      run: |
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app=myapp --timeout=300s
        
        # Start port forward in background
        kubectl port-forward svc/myapp 8080:8080 &
        sleep 10
        
        # Test all endpoints
        echo "Testing home endpoint..."
        response=$(curl -s http://localhost:8080/)
        echo "Response: $response"
        status=$(echo "$response" | jq -r '.status')
        if [[ "$status" != "running" ]]; then
          echo "‚ùå Home endpoint test failed - expected 'running', got '$status'"
          exit 1
        fi
        echo "‚úÖ Home endpoint working"
        
        echo "Testing health endpoint..."
        response=$(curl -s http://localhost:8080/health)
        echo "Response: $response"
        status=$(echo "$response" | jq -r '.status')
        if [[ "$status" != "healthy" ]]; then
          echo "‚ùå Health endpoint test failed - expected 'healthy', got '$status'"
          exit 1
        fi
        echo "‚úÖ Health endpoint working"
        
        echo "Testing config endpoint..."
        response=$(curl -s http://localhost:8080/config)
        echo "Response: $response"
        if ! echo "$response" | jq -e '.["jwt-secret-configured"]' > /dev/null; then
          echo "‚ùå Config endpoint test failed"
          exit 1
        fi
        echo "‚úÖ Config endpoint working"
        
        echo "Testing vault integration endpoint..."
        response=$(curl -s http://localhost:8080/vault-test)
        echo "Response: $response"
        if ! echo "$response" | jq -e '.["jwt-secret-masked"]' > /dev/null; then
          echo "‚ùå Vault integration test failed"
          exit 1
        fi
        echo "‚úÖ Vault integration working"
        
        echo "Testing actuator health..."
        response=$(curl -s http://localhost:8080/actuator/health)
        echo "Response: $response"
        status=$(echo "$response" | jq -r '.status')
        if [[ "$status" != "UP" ]]; then
          echo "‚ùå Actuator health test failed - expected 'UP', got '$status'"
          exit 1
        fi
        echo "‚úÖ Actuator health working"
        
        echo "üéâ All tests passed successfully!"
        
    - name: Show deployment status
      run: |
        echo "=== Deployment Status ==="
        kubectl get pods -l app=myapp
        echo ""
        kubectl get svc myapp
        echo ""
        echo "=== Application Logs ==="
        kubectl logs -l app=myapp --tail=20
        
    - name: Cleanup on failure
      if: failure()
      run: |
        echo "=== Debugging Information ==="
        echo "Application Pods:"
        kubectl get pods -l app=myapp
        echo ""
        echo "Vault Pods:"
        kubectl get pods -l app.kubernetes.io/name=vault
        echo ""
        echo "Application Logs:"
        kubectl logs -l app=myapp --tail=50 || true
        echo ""
        echo "Vault Logs:"
        kubectl logs -l app.kubernetes.io/name=vault --tail=50 || true